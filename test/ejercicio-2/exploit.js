const { expect } = require("chai");
const { ethers } = require("hardhat");

describe("Ejercicio 2", function () {

  let deployer, atacante;
  const INITIAL_SUPPLY = ethers.utils.parseUnits('1000','ether');

  beforeEach(async function () {

    [deployer, atacante] = await ethers.getSigners();

    // Se deploya el contrato vulnerable
    const Token = await ethers.getContractFactory("Token", deployer);
    this.contrato = await Token.deploy(INITIAL_SUPPLY);
    
    // Todo el initial supply es asignado a la cuenta que deployó el contrato
    expect(await this.contrato.balanceOf(deployer.address)).to.eq(INITIAL_SUPPLY);

    let balanceInicialAtacante = await this.contrato.balanceOf(atacante.address);
    expect(balanceInicialAtacante).to.eq('0');
    console.log(`El balance inicial del atacante es ${balanceInicialAtacante} tokens`);
  });

  it("Ataque", async function () {
    // La condicion no checkea nada porque uint - uint siempre es >= 0
    let totalSupply = await this.contrato.totalSupply();
    expect(await this.contrato.balanceOf(atacante.address)).to.eq('0');
    await this.contrato.transfer(atacante.address, totalSupply);
    expect(await this.contrato.balanceOf(atacante.address)).to.eq(totalSupply);
  })
});

describe("Ejercicio 2 - Safe", function () {

  let deployer, atacante;
  const INITIAL_SUPPLY = ethers.utils.parseUnits('1000','ether');

  beforeEach(async function () {

    [deployer, atacante] = await ethers.getSigners();

    // Se deploya el contrato vulnerable
    const TokenSafe = await ethers.getContractFactory("TokenSafe", deployer);
    this.contrato = await TokenSafe.deploy(INITIAL_SUPPLY);
    
    // Todo el initial supply es asignado a la cuenta que deployó el contrato
    expect(await this.contrato.balanceOf(deployer.address)).to.eq(INITIAL_SUPPLY);

    let balanceInicialAtacante = await this.contrato.balanceOf(atacante.address);
    expect(balanceInicialAtacante).to.eq('0');
    console.log(`El balance inicial del atacante es ${balanceInicialAtacante} tokens`);
  });

  it("Ataque Fallido", async function () {
    let totalSupply = await this.contrato.totalSupply();
    expect(await this.contrato.balanceOf(atacante.address)).to.eq(0);
    await expect(this.contrato.connect(atacante).transfer(atacante.address, totalSupply)).to.be.revertedWith('No tiene suficientes tokens');
  })
});
